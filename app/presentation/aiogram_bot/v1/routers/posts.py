from aiogram import Router, F
from aiogram.types import Message, TelegramObject
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.presentation.aiogram_bot.v1.states.posts import CreatePostForm
from app.presentation.aiogram_bot.v1.keyboards.posts import (
    get_types_of_posts_rkb_buttons,
    get_cancel_rkb_button,
    get_post_or_ready_rkb_buttons
)
from app.presentation.aiogram_bot.v1.keyboards.start import get_start_rkb_buttons
from app.infrastructure.config import bot, settings
from app.presentation.aiogram_bot.v1.enums import ButtonNames

router = Router()


@router.message(F.text == "üìÉ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def show_types_of_posts(message: Message, state: FSMContext) -> None:
    await state.set_state(CreatePostForm.choosing_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞",
                         reply_markup=get_types_of_posts_rkb_buttons())


@router.message(CreatePostForm.choosing_type, F.text.in_({
    ButtonNames.TEXT_BUTTON.value,
    ButtonNames.MEDIA_BUTTON.value,
    ButtonNames.BACK_BUTTON.value,
}))
async def choose_post_type(message: Message, state: FSMContext) -> None:
    post_type = message.text
    if post_type == ButtonNames.BACK_BUTTON.value:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_rkb_buttons())
    elif post_type == ButtonNames.TEXT_BUTTON.value:
        await state.set_state(CreatePostForm.text_post)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:", reply_markup=get_cancel_rkb_button())
    elif post_type == ButtonNames.MEDIA_BUTTON.value:
        await state.set_state(CreatePostForm.media_post)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (–æ–¥–Ω–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ) –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:",
                             reply_markup=get_cancel_rkb_button())


@router.message(F.text == ButtonNames.CANCEL_BUTTON.value)
async def handle_cancel(message: Message, state: FSMContext) -> None:
    if await state.get_state() is None:
        return
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_start_rkb_buttons())


@router.message(CreatePostForm.text_post)
async def handle_text_post(message: Message, state: FSMContext) -> None:
    await state.update_data(post_type="text", caption=message.text)
    await state.set_state(CreatePostForm.buttons)
    await message.answer(
        (
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–æ–∫, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ <b>'+'</b>, –∏ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
            "–±–µ–∑ –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "–ö–Ω–æ–ø–∫–∞ 1 + https://example.com, –ö–Ω–æ–ø–∫–∞ 2 + https://example2.com"
        )
    )


@router.message(CreatePostForm.media_post)
async def handle_media_post(message: Message, state: FSMContext) -> None:
    content = None
    if message.photo:
        content = message.photo[-1].file_id
        await state.update_data(post_type="photo", content=content)
    elif message.video:
        content = message.video.file_id
        await state.update_data(post_type="video", content=content)
    elif message.animation:
        content = message.animation.file_id
        await state.update_data(post_type="gif", content=content)

    if content:
        await state.set_state(CreatePostForm.caption)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:", reply_markup=get_cancel_rkb_button())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")


@router.message(CreatePostForm.caption)
async def handle_caption(message: Message, state: FSMContext) -> None:
    await state.update_data(caption=message.text)
    await state.set_state(CreatePostForm.buttons)
    await message.answer(
        (
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–æ–∫, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ <b>'+'</b>, –∏ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
            "–±–µ–∑ –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "–ö–Ω–æ–ø–∫–∞ 1 + https://example.com, –ö–Ω–æ–ø–∫–∞ 2 + https://example2.com"
        )
    )


@router.message(CreatePostForm.buttons)
async def handle_buttons(message: Message, state: FSMContext) -> None:
    button_data = message.text.split(',')
    builder = InlineKeyboardBuilder()

    for item in button_data:
        parts = item.strip().split(' + ')
        if len(parts) == 2:
            text, url = parts[0].strip(), parts[1].strip()
            builder.button(text=text, url=url)
        else:
            await message.answer(
                (
                    "–ù–µ–≤–µ—Ä–Ω–æ!"
                    "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–æ–∫, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ <b>'+'</b>, –∏ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
                    "–±–µ–∑ –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                    "–ö–Ω–æ–ø–∫–∞ 1 + https://example.com, –ö–Ω–æ–ø–∫–∞ 2 + https://example2.com"
                )
            )

            return

    await state.update_data(button_builder=builder)
    await state.set_state(CreatePostForm.sizes)
    await message.answer(
        (
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. "
            "–ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "'3, 2, 1'\n\n"
            "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ:\n"
            "- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å <b>3 –∫–Ω–æ–ø–∫–∏</b>.\n"
            "- –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å <b>2 –∫–Ω–æ–ø–∫–∏</b>.\n"
            "- –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å <b>1 –∫–Ω–æ–ø–∫—É</b>.\n\n"
            "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '2', —Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ <b>2 –∫–Ω–æ–ø–∫–∏</b>.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, "
            "—á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Ç–æ–∫ –∏ —Å—Å—ã–ª–æ–∫, "
            "–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ."
        )
    )


@router.message(CreatePostForm.sizes)
async def handle_sizes(message: Message, state: FSMContext) -> None:
    try:
        sizes = [int(size.strip()) for size in message.text.split(',')]
        data = await state.get_data()
        builder = data['button_builder']
        builder.adjust(*sizes)

        post_type = data['post_type']
        content = data.get('content', '')
        caption = data.get('caption', '')

        if post_type == "text":
            await message.answer(text=caption, reply_markup=builder.as_markup())
        elif post_type == "photo":
            await message.answer_photo(photo=content, caption=caption, reply_markup=builder.as_markup())
        elif post_type == "video":
            await message.answer_video(video=content, caption=caption, reply_markup=builder.as_markup())
        elif post_type == "gif":
            await message.answer_animation(animation=content, caption=caption, reply_markup=builder.as_markup())

        await state.set_state(CreatePostForm.confirm)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.",
                             reply_markup=get_post_or_ready_rkb_buttons())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '3, 2, 1'):"
        )


@router.message(CreatePostForm.confirm, F.text.in_({
    ButtonNames.POST_TO_CHANNEL_BUTTON.value,
    ButtonNames.READY_BUTTON.value
}))
async def confirm_post(message: Message, state: FSMContext) -> None:
    if message.text == ButtonNames.POST_TO_CHANNEL_BUTTON.value:
        data = await state.get_data()
        post_type = data['post_type']
        content = data.get('content', '')
        caption = data.get('caption', '')
        builder = data['button_builder']

        try:
            if post_type == "text":
                await bot.send_message(chat_id=settings.CHANNEL_ID, text=caption, reply_markup=builder.as_markup())
            elif post_type == "photo":
                await bot.send_photo(chat_id=settings.CHANNEL_ID, photo=content, caption=caption,
                                     reply_markup=builder.as_markup())
            elif post_type == "video":
                await bot.send_video(chat_id=settings.CHANNEL_ID, video=content, caption=caption,
                                     reply_markup=builder.as_markup())
            elif post_type == "gif":
                await bot.send_animation(chat_id=settings.CHANNEL_ID, animation=content, caption=caption,
                                         reply_markup=builder.as_markup())

            await message.answer("–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=get_start_rkb_buttons())
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª. –û—à–∏–±–∫–∞: {str(e)}",
                                 reply_markup=get_start_rkb_buttons())

    elif message.text == ButtonNames.READY_BUTTON.value:
        await message.answer("–ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–∑–∂–µ.",
                             reply_markup=get_start_rkb_buttons())

    await state.clear()


